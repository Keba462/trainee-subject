# Generated by Django 3.1.14 on 2023-05-15 12:31

import _socket
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import django_crypto_fields.fields.encrypted_char_field
import django_crypto_fields.fields.encrypted_text_field
import django_crypto_fields.fields.firstname_field
import django_crypto_fields.fields.identity_field
import django_crypto_fields.fields.lastname_field
import django_revision.revision_field
import edc_base.model_fields.custom_fields
import edc_base.model_fields.date_estimated
import edc_base.model_fields.hostname_modification_field
import edc_base.model_fields.userfield
import edc_base.model_fields.uuid_auto_field
import edc_base.model_validators.date
import edc_base.model_validators.phone
import edc_base.sites.managers
import edc_base.utils
import edc_consent.validators
import edc_protocol.validators
import edc_sms.models.subject_recipent_model_mixin
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('edc_appointment', '0016_auto_20230503_1347'),
        ('sites', '0002_alter_domain_unique'),
        ('edc_lab', '0016_auto_20230503_1347'),
    ]

    operations = [
        migrations.CreateModel(
            name='SubjectOffStudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('subject_identifier', models.CharField(max_length=50, unique=True)),
                ('schedule', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are scheduled data being submitted on the exit date?')),
                ('offstudy_date', models.DateField(default=edc_base.utils.get_utcnow, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Offstudy date')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, null=True, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report datetime')),
                ('reason', models.CharField(choices=[('death', 'Patient death'), ('ltfu', 'Patient lost to follow-up'), ('eval_complete', 'Cancer evaluation complete'), ('declines_further_eval', 'Patient or clinician declines further evaluation'), ('patient_requests_removal', 'Patient requests removal from Potlako'), ('clinician_requests_removal', 'Clinician requests removal from Potlako'), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='Reason for exit')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
            ],
            options={
                'verbose_name': 'Subject off Study',
                'verbose_name_plural': 'Subject Off Study',
            },
        ),
        migrations.CreateModel(
            name='SubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('initial_visit/contact', 'Initial visit/contact'), ('fu_visit/contact', 'Follow up visit/contact'), ('unscheduled_visit/contact', 'Unscheduled visit/contact'), ('missed_visit', 'Missed visit'), ('death', 'Death'), ('off study', 'Off study (use only when taking subject off study)'), ('deferred', 'Deferred')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify:')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit', 'Clinic visit with participant'), ('other_contact_subject', 'Other contact with participant (i.e telephone call)'), ('contact_health worker', 'Contact with health care worker'), ('contact_family/designated_person', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='edc_appointment.appointment')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Visit',
                'ordering': ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence', 'report_datetime'),
                'abstract': False,
                'unique_together': {('subject_identifier', 'visit_schedule_name', 'schedule_name', 'report_datetime'), ('subject_identifier', 'visit_schedule_name', 'schedule_name', 'visit_code', 'visit_code_sequence')},
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('screening_identifier', models.CharField(editable=False, max_length=36, unique=True, verbose_name='Screening Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of the report', verbose_name='Report Date and Time')),
                ('enrollment_interest', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient want to be enrolled into the study?')),
                ('disinterest_reason', models.CharField(blank=True, choices=[('dont_want_to_participate', "I don't want to be part of a study"), ('dont_think_I_have_condition', "I don't think I have the condition"), ('partner_doesnt_want_to_participate', "My partner doesn't want me to participate"), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='If no, reason patient does not wish to enroll into the study')),
                ('disinterest_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the potential paticipant a Botswana Citizen?')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text="If 'No', participant not be consented", max_length=3, null=True, verbose_name='If no,Is participant married to a Motswana')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, null=True, verbose_name='If yes,Can the participate show proof of marriage')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('is_minor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes participant can not be consented', max_length=10, verbose_name='Is a minor(Under 18)')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If No, participant may not be consented.', max_length=3, null=True, verbose_name='Is a guardian available?')),
                ('literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant literate')),
                ('literate_witness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='If no,Does participant have a literate witness')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=6, verbose_name='Are you male or female?')),
                ('enrollment_site', models.CharField(choices=[('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('otse_clinic', 'Otse clinic'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('oodi_clinic', 'Oodi clinic'), ('bokaa_clinic', 'Bokaa clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('sheleketla_clinic', 'Sheleketla clinic'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('lerala_clinic', 'Lerala clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('sefophe_clinic', 'Sefophe clinic'), ('mmadinare_primary_hospital', 'Mmadinare Primary Hospital'), ('manga_clinic', 'Manga clinic'), ('mandunyane_clinic', 'Mandunyane clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('nata_clinic', 'Nata clinic'), ('OTHER', 'Other (specify)')], help_text='Hospital where subject is recruited', max_length=50, null=True)),
                ('enrollment_site_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Trainee + Eligibility',
                'verbose_name_plural': 'Trainee + Eligibility',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='SubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('subject_identifier', models.CharField(max_length=50, unique=True, verbose_name='Subject Identifier')),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('tracking_identifier', models.CharField(max_length=30, null=True)),
                ('related_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('parent_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='Which health facility do you normally go to, in this village?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and lastname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('does_not_work', 'Does not work')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='subject_locator_site', to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Locator',
            },
            managers=[
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalSubjectVisit',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('visit_schedule_name', models.CharField(editable=False, help_text='the name of the visit schedule used to find the "schedule"', max_length=25)),
                ('schedule_name', models.CharField(editable=False, max_length=25)),
                ('visit_code', models.CharField(editable=False, max_length=25, null=True)),
                ('visit_code_sequence', models.IntegerField(blank=True, default=0, help_text='An integer to represent the sequence of additional appointments relative to the base appointment, 0, needed to complete data collection for the timepoint. (NNNN.0)', null=True, verbose_name='Sequence')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason_unscheduled_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for unscheduled visit, specify')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'Missed' above, provide the reason the scheduled visit was missed")),
                ('reason_missed_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=25, null=True, verbose_name='If "Other" reason for missed visit, specify')),
                ('study_status', models.CharField(max_length=50, null=True, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('info_source_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If "Other" source of information, specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Deceased'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('reason', models.CharField(choices=[('initial_visit/contact', 'Initial visit/contact'), ('fu_visit/contact', 'Follow up visit/contact'), ('unscheduled_visit/contact', 'Unscheduled visit/contact'), ('missed_visit', 'Missed visit'), ('death', 'Death'), ('off study', 'Off study (use only when taking subject off study)'), ('deferred', 'Deferred')], max_length=25, verbose_name='What is the reason for this visit report?')),
                ('reason_unscheduled', models.CharField(choices=[('routine_oncology', 'Routine oncology clinic visit (i.e. planned chemo, follow-up)'), ('ill_oncology', 'Ill oncology clinic visit'), ('patient_called', 'Patient called to come for visit'), ('N/A', 'Not Applicable'), ('OTHER', 'Other, specify:')], default='N/A', max_length=50, verbose_name="If 'Unscheduled' above, provide reason for the unscheduled visit")),
                ('info_source', models.CharField(choices=[('clinic_visit', 'Clinic visit with participant'), ('other_contact_subject', 'Other contact with participant (i.e telephone call)'), ('contact_health worker', 'Contact with health care worker'), ('contact_family/designated_person', 'Contact with family or designated person who can provide information'), ('OTHER', 'Other,specify')], max_length=40, verbose_name='What is the main source of this information?')),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('appointment', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_appointment.appointment')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Visit',
                'verbose_name_plural': 'historical Subject Visits',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectScreening',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('screening_identifier', models.CharField(db_index=True, editable=False, max_length=36, verbose_name='Screening Identifier')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text='Date and time of the report', verbose_name='Report Date and Time')),
                ('enrollment_interest', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Does the patient want to be enrolled into the study?')),
                ('disinterest_reason', models.CharField(blank=True, choices=[('dont_want_to_participate', "I don't want to be part of a study"), ('dont_think_I_have_condition', "I don't think I have the condition"), ('partner_doesnt_want_to_participate', "My partner doesn't want me to participate"), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='If no, reason patient does not wish to enroll into the study')),
                ('disinterest_reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the potential paticipant a Botswana Citizen?')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text="If 'No', participant not be consented", max_length=3, null=True, verbose_name='If no,Is participant married to a Motswana')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="( if 'NO' STOP patient cannot be enrolled )", max_length=3, null=True, verbose_name='If yes,Can the participate show proof of marriage')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('is_minor', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If yes participant can not be consented', max_length=10, verbose_name='Is a minor(Under 18)')),
                ('guardian', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If No, participant may not be consented.', max_length=3, null=True, verbose_name='Is a guardian available?')),
                ('literate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant literate')),
                ('literate_witness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='If no,Does participant have a literate witness')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=6, verbose_name='Are you male or female?')),
                ('enrollment_site', models.CharField(choices=[('mmathethe_clinic', 'Mmathethe clinic'), ('molapowabojang_clinic', 'Molapowabojang clinic'), ('otse_clinic', 'Otse clinic'), ('mmankgodi_clinic', 'Mmankgodi clinic'), ('lentsweletau_clinic', 'Lentsweletau clinic'), ('letlhakeng_clinic', 'Letlhakeng clinic'), ('oodi_clinic', 'Oodi clinic'), ('bokaa_clinic', 'Bokaa clinic'), ('metsimotlhabe_clinic', 'Metsimotlhabe clinic'), ('shoshong_clinic', 'Shoshong clinic'), ('sheleketla_clinic', 'Sheleketla clinic'), ('ramokgonami_clinic', 'Ramokgonami clinic'), ('lerala_clinic', 'Lerala clinic'), ('maunatlala_clinic', 'Maunatlala clinic'), ('sefophe_clinic', 'Sefophe clinic'), ('mmadinare_primary_hospital', 'Mmadinare Primary Hospital'), ('manga_clinic', 'Manga clinic'), ('mandunyane_clinic', 'Mandunyane clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('tati_siding_clinic', 'Tati Siding clinic'), ('masunga_primary_hospital', 'Masunga Primary Hospital'), ('masunga_clinic', 'Masunga clinic'), ('mathangwane_clinic', 'Mathangwane clinic'), ('nata_clinic', 'Nata clinic'), ('OTHER', 'Other (specify)')], help_text='Hospital where subject is recruited', max_length=50, null=True)),
                ('enrollment_site_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('is_eligible', models.BooleanField(default=False, editable=False)),
                ('ineligibility', models.TextField(editable=False, max_length=150, null=True, verbose_name='Reason not eligible')),
                ('is_consented', models.BooleanField(default=False, editable=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Trainee + Eligibility',
                'verbose_name_plural': 'historical Trainee + Eligibility',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectRequisition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('requisition_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(db_index=True, editable=False, max_length=50, null=True)),
                ('primary_aliquot_identifier', models.CharField(db_index=True, editable=False, max_length=18, null=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sample_id', models.CharField(blank=True, max_length=50, verbose_name='LIS generated Sample Identifier')),
                ('exists_on_lis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Already exists on LIS?')),
                ('study_site', models.CharField(choices=[('40', 'Gaborone')], default='', max_length=25, verbose_name='Study site')),
                ('estimated_volume', models.DecimalField(decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('item_count', models.IntegerField(help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Total number of items')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('reason_not_drawn', models.CharField(choices=[('collection_failed', 'Tried, but unable to obtain sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies'), ('OTHER', 'Other'), ('N/A', 'Not Applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('panel', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='edc_lab.panel')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
                ('subject_visit', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='trainee_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'historical subject requisition',
                'verbose_name_plural': 'historical subject requisitions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectOffStudy',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('subject_identifier', models.CharField(db_index=True, max_length=50)),
                ('schedule', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Are scheduled data being submitted on the exit date?')),
                ('offstudy_date', models.DateField(default=edc_base.utils.get_utcnow, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model_validators.date.date_not_future], verbose_name='Offstudy date')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, null=True, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report datetime')),
                ('reason', models.CharField(choices=[('death', 'Patient death'), ('ltfu', 'Patient lost to follow-up'), ('eval_complete', 'Cancer evaluation complete'), ('declines_further_eval', 'Patient or clinician declines further evaluation'), ('patient_requests_removal', 'Patient requests removal from Potlako'), ('clinician_requests_removal', 'Clinician requests removal from Potlako'), ('OTHER', 'Other (specify)')], max_length=50, null=True, verbose_name='Reason for exit')),
                ('reason_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Subject off Study',
                'verbose_name_plural': 'historical Subject Off Study',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectLocator',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('subject_identifier', models.CharField(db_index=True, max_length=50, verbose_name='Subject Identifier')),
                ('action_identifier', models.CharField(max_length=25, null=True)),
                ('tracking_identifier', models.CharField(max_length=30, null=True)),
                ('related_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('parent_tracking_identifier', models.CharField(max_length=30, null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('may_call', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission <b>to contacted by telephone or cell</b> by study staff for follow-up purposes during the study?')),
                ('may_visit_home', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, verbose_name='Has the participant given permission for study staff <b>to make home visits</b> for follow-up purposes?')),
                ('may_sms', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=25, null=True, verbose_name='Has the participant given permission <b>to be contacted by SMS</b> by study staff for follow-up purposes during the study?')),
                ('mail_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Mailing address ')),
                ('physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Physical address with detailed description')),
                ('subject_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('subject_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('subject_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone')),
                ('subject_phone_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone (alternate)')),
                ('may_contact_indirectly', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='For example a partner, spouse, family member, neighbour ...', max_length=25, verbose_name='Has the participant given permission for study staff <b>to contact anyone else</b> for follow-up purposes during the study?')),
                ('indirect_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full names of the contact person')),
                ('indirect_contact_relation', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('indirect_contact_physical_address', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=500, null=True, verbose_name='Full physical address ')),
                ('indirect_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('indirect_contact_cell_alt', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternative)')),
                ('indirect_contact_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('subject_work_place', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Name and location of work place')),
                ('subject_work_phone', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Work contact telephone')),
                ('subject_work_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Work contact cell number')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow)),
                ('date_signed', models.DateField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.date_not_future], verbose_name='Date Locator Form signed ')),
                ('local_clinic', models.CharField(help_text='Please give clinic code.', max_length=75, verbose_name='Which health facility do you normally go to, in this village?')),
                ('home_village', models.CharField(max_length=75, verbose_name='Where is your home village?')),
                ('has_alt_contact', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], max_length=25, verbose_name='If we are unable to contact the person indicated above, is there another individual (including next of kin) with whom the study team can get in contact with?')),
                ('alt_contact_name', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text='include firstname and lastname (Encryption: RSA local)', max_length=71, null=True, verbose_name='Full Name of the responsible person')),
                ('alt_contact_rel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Relationship to participant')),
                ('alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number')),
                ('other_alt_contact_cell', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.CellNumber], verbose_name='Cell number (alternate)')),
                ('alt_contact_tel', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[edc_base.model_validators.phone.TelephoneNumber], verbose_name='Telephone number')),
                ('may_call_work', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('does_not_work', 'Does not work')], max_length=25, verbose_name='Has the participant given permission to contacted <b>at work</b> by telephone or cell by study staff for follow-up purposes during the study?')),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Locator',
                'verbose_name_plural': 'historical Subject Locators',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('identity_type', models.CharField(choices=[('country_id', 'Country ID number'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('OTHER', 'Other')], max_length=25, verbose_name='What type of identity number is this?')),
                ('language', models.CharField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=50, null=True, verbose_name='Language of consent')),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If no, participant is not eligible.', max_length=15, null=True, verbose_name="I have documented participant's details on the verbal script, and signed electronically")),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical Subject Consent',
                'verbose_name_plural': 'historical Subject Consents',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical on schedule',
                'verbose_name_plural': 'historical on schedules',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOffSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, editable=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sites.site')),
            ],
            options={
                'verbose_name': 'historical off schedule',
                'verbose_name_plural': 'historical off schedules',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='EducationalQuestionaire',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('working', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=11, verbose_name='Are you currently working ?')),
                ('work_type', models.CharField(choices=[('formal_employment', 'Formal employment'), ('temporary_employment', 'Temporary Employment'), ('part_time_employment', 'Part-Time Employment'), ('self_employed', 'Self Employed'), ('self_employed_making_money_full_time', 'Self Employed Making Money Full Time'), ('self_employed_making_money_part_time', 'Self Employed Making Money Part Time'), ('OTHER', 'Other'), ('N/A', 'Not Applicable')], max_length=100, verbose_name='In your main job what type of work do you do ?')),
                ('occupation', models.CharField(choices=[('Farmer (own land)', 'Farmer (own land)'), ('Farm work on employers land', 'Farm work on employers land'), ('Domestic worker', 'Domestic worker'), ('Work in bar/ hotel/ guest house/ entertainment venue', 'Work in bar/ hotel/ guest house/ entertainment venue'), ('Fishing', 'Fishing'), ('Mining', 'Mining'), ('Tourism/game parks', 'Tourism/game parks'), ('Working in shop / small business', 'Working in shop / small business'), ('Informal selling', 'Informal selling'), ('Commercial sex work', 'Commercial sex work'), ('Transport (trucker/ taxi driver)', 'Transport (trucker/ taxi driver)'), ('Factory worker', 'Factory worker'), ('Guard (security company)', 'Guard (security company)'), ('Police/ Soldier', 'Police/ Soldier'), ('Clerical and office work', 'Clerical and office work'), ('Government worker', 'Government worker'), ('Teacher', 'Teacher'), ('Health care worker', 'Health care worker'), ('Other professional', 'Other professional'), ("Don't want to answer", "Don't want to answer"), ('Other', 'Other'), ('N/A', 'Not Applicable')], max_length=100, verbose_name='Describe the work that you do or did in your most recent job')),
                ('salary', models.CharField(choices=[('No income', 'No income'), ('1 - 199 pula', '1 - 199 pula'), ('200 - 499 pula', '200 - 499 pula'), ('500 - 999 pula', '500 - 999 pula'), ('1000 - 4999 pula', '1000 - 4999 pula'), ('More than 10,000 pula', 'More than 10,000 pula'), ('N/A', 'Not Applicable')], max_length=150, verbose_name='In the past month, how much money did you earn from work you did or received in payment?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='trainee_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Educational Questionaire',
            },
        ),
        migrations.CreateModel(
            name='Demographic',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('marital_status', models.CharField(choices=[('Single', 'Single'), ('Married', 'Married'), ('Divorced', 'Divorced'), ('Widowed', 'Widowed')], max_length=20, verbose_name='What is your marital status')),
                ('women_number_husbands', models.IntegerField(blank=True, null=True, verbose_name='How many wives does your husband have (including traditional marriage), including yourself?')),
                ('men_number_wives', models.IntegerField(blank=True, null=True, verbose_name='How many wives do you have, including traditional marriage?')),
                ('housemate', models.CharField(choices=[('Alone', 'Alone'), ('Partner_or_Spouse', 'Partner_or_Spouse'), ('Sibilings', 'Siblings'), ('Other', 'Other'), ("Don't want to answer", "Don't want to answer")], max_length=20, verbose_name='Who do you currently live with?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='trainee_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Demographics',
            },
        ),
        migrations.CreateModel(
            name='CommunityEngagement',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('form_as_json', models.TextField(editable=False, help_text='System field to save form.as_json. form.as_json should be called in modeladmin.save_model', null=True)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('community_activity', models.CharField(choices=[('Very active', 'Very active'), ('Somewhat active', 'Somewhat active'), ('Not active at all', 'Not active at all'), ("Don't want to answer", "Don't want to answer")], help_text='Examples are Motshelo, Syndicate,PTA, VDC(Village Development Committee),Mophato and development of the community that surrounds you?', max_length=50, verbose_name='How active are you in community activities such as burial society,')),
                ('voting_status', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not Applicable'), ('doesnt_want_to_answer', 'Does not want to answer')], max_length=21, verbose_name='Did you vote in the last local government election ?')),
                ('major_problems', models.CharField(choices=[(' HIV/AIDS', ' HIV/AIDS'), ('Schools', 'Schools'), ('Sewer', 'Sewer'), ('Unemployment', 'Unemployment'), ('Roads', 'Roads'), ('Water', 'Water'), ('House', 'House'), ('Malaria', 'Malaria'), ('dont_know', 'Dont Know')], max_length=50, verbose_name='What are the major problems in this neighborhood?')),
                ('problem_solving', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('dont_know', 'Dont Know'), ('doesnt_want_to_answer', 'Does not want to answer'), ('N/A', 'Not Applicable')], max_length=50, verbose_name='If there is a problem in this neighborhood,do the adults work together in solving it?')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='trainee_subject.subjectvisit')),
            ],
            options={
                'verbose_name': 'Community Engagement',
            },
        ),
        migrations.CreateModel(
            name='SubjectRequisition',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('requisition_identifier', models.CharField(max_length=50, unique=True, verbose_name='Requisition Id')),
                ('identifier_prefix', models.CharField(editable=False, max_length=50, null=True, unique=True)),
                ('primary_aliquot_identifier', models.CharField(editable=False, max_length=18, null=True, unique=True)),
                ('clinic_verified', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True)),
                ('clinic_verified_datetime', models.DateTimeField(null=True)),
                ('requisition_datetime', models.DateTimeField(default=django.utils.timezone.now, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Requisition Date')),
                ('drawn_datetime', models.DateTimeField(blank=True, help_text='If not drawn, leave blank. Same as date and time of finger prick in case on DBS.', null=True, validators=[edc_base.model_validators.date.datetime_not_future], verbose_name='Date / Time Specimen Drawn')),
                ('is_drawn', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If No, provide a reason below', max_length=3, verbose_name='Was a specimen drawn?')),
                ('reason_not_drawn_other', edc_base.model_fields.custom_fields.OtherCharField(blank=True, max_length=35, null=True, verbose_name='If Other, specify ...')),
                ('protocol_number', models.CharField(editable=False, max_length=10, null=True)),
                ('clinician_initials', edc_base.model_fields.custom_fields.InitialsField(blank=True, help_text='Type 2-3 letters, all in uppercase and no spaces', max_length=3, null=True, verbose_name='Initials')),
                ('specimen_type', models.CharField(blank=True, max_length=25, null=True, verbose_name='Specimen type')),
                ('item_type', models.CharField(choices=[('N/A', 'Not applicable'), ('tube', 'Tube'), ('swab', 'Swab'), ('dbs', 'DBS Card'), ('OTHER', 'Other')], default='N/A', max_length=25, verbose_name='Item collection type')),
                ('received', models.BooleanField(default=False)),
                ('received_datetime', models.DateTimeField(blank=True, null=True)),
                ('processed', models.BooleanField(default=False)),
                ('processed_datetime', models.DateTimeField(blank=True, null=True)),
                ('packed', models.BooleanField(default=False)),
                ('packed_datetime', models.DateTimeField(blank=True, null=True)),
                ('shipped', models.BooleanField(default=False)),
                ('shipped_datetime', models.DateTimeField(blank=True, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('sample_id', models.CharField(blank=True, max_length=50, verbose_name='LIS generated Sample Identifier')),
                ('exists_on_lis', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='No', max_length=3, verbose_name='Already exists on LIS?')),
                ('study_site', models.CharField(choices=[('40', 'Gaborone')], default='', max_length=25, verbose_name='Study site')),
                ('estimated_volume', models.DecimalField(decimal_places=2, help_text='If applicable, estimated volume of sample for this test/order. This is the total volume if number of "tubes" above is greater than 1', max_digits=7, verbose_name='Estimated volume in mL')),
                ('item_count', models.IntegerField(help_text='Number of tubes, samples, cards, etc being sent for this test/order only. Determines number of labels to print', verbose_name='Total number of items')),
                ('priority', models.CharField(choices=[('normal', 'Normal'), ('urgent', 'Urgent')], default='normal', max_length=25, verbose_name='Priority')),
                ('reason_not_drawn', models.CharField(choices=[('collection_failed', 'Tried, but unable to obtain sample from patient'), ('absent', 'Patient did not attend visit'), ('refused', 'Patient refused'), ('no_supplies', 'No supplies'), ('OTHER', 'Other'), ('N/A', 'Not Applicable')], default='N/A', max_length=25, verbose_name='If not drawn, please explain')),
                ('comments', models.TextField(blank=True, max_length=350, null=True)),
                ('panel', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='edc_lab.panel')),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
                ('subject_visit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='trainee_subject.subjectvisit')),
            ],
            options={
                'unique_together': {('panel', 'subject_visit')},
            },
        ),
        migrations.CreateModel(
            name='SubjectConsent',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('slug', models.CharField(db_index=True, default='', editable=False, help_text='a field used for quick search', max_length=250, null=True)),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('subject_identifier_as_pk', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('subject_identifier_aka', models.CharField(editable=False, help_text='track a previously allocated identifier.', max_length=50, null=True, verbose_name='Subject Identifier a.k.a')),
                ('citizen', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Is the participant a Botswana citizen? ')),
                ('legal_marriage', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='If not a citizen, is the participant legally married to a Botswana citizen?')),
                ('marriage_certificate', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', help_text="If 'No', participant may not be consented.", max_length=3, null=True, verbose_name='[Interviewer] Has the participant produced the marriage certificate as proof? ')),
                ('marriage_certificate_no', models.CharField(blank=True, help_text='e.g. 000/YYYY', max_length=9, null=True, verbose_name='What is the marriage certificate number?')),
                ('identity', django_crypto_fields.fields.identity_field.IdentityField(help_text=' (Encryption: RSA local)', max_length=71, verbose_name='Identity number')),
                ('confirm_identity', django_crypto_fields.fields.identity_field.IdentityField(help_text='Retype the identity number (Encryption: RSA local)', max_length=71, null=True)),
                ('first_name', django_crypto_fields.fields.firstname_field.FirstnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True)),
                ('last_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, verbose_name='Last name')),
                ('initials', django_crypto_fields.fields.encrypted_char_field.EncryptedCharField(blank=True, help_text=' (Encryption: RSA local)', max_length=71, null=True, validators=[django.core.validators.RegexValidator(message='Ensure initials consist of letters only in upper case, no spaces.', regex='^[A-Z]{2,3}$')])),
                ('dob', models.DateField(null=True, verbose_name='Date of birth')),
                ('is_dob_estimated', edc_base.model_fields.date_estimated.IsDateEstimatedField(choices=[('-', 'No'), ('D', 'Yes, estimated the Day'), ('MD', 'Yes, estimated Month and Day'), ('YMD', 'Yes, estimated Year, Month and Day')], help_text='If the exact date is not known, please indicate which part of the date is estimated.', max_length=25, null=True, verbose_name='Is date of birth estimated?')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=1, null=True, verbose_name='Gender')),
                ('guardian_name', django_crypto_fields.fields.lastname_field.LastnameField(blank=True, help_text="Required only if participant is a minor.<BR>Format is 'LASTNAME, FIRSTNAME'. All uppercase separated by a comma. (Encryption: RSA local)", max_length=71, null=True, validators=[edc_consent.validators.FullNameValidator()], verbose_name="Guardian's last and first name")),
                ('subject_type', models.CharField(max_length=25)),
                ('consent_signature', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have verified that the participant has signed the consent form')),
                ('consent_copy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Declined', 'Yes, but subject declined copy')], help_text='If declined, return copy with the consent', max_length=20, null=True, validators=[edc_consent.validators.eligible_if_yes_or_declined], verbose_name='I have provided the participant with a copy of their signed informed consent')),
                ('is_verified', models.BooleanField(default=False, editable=False)),
                ('is_verified_datetime', models.DateTimeField(editable=False, null=True)),
                ('verified_by', models.CharField(editable=False, max_length=25, null=True)),
                ('consent_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Consent date and time')),
                ('version', models.CharField(editable=False, help_text="See 'Consent Type' for consent versions by period.", max_length=10, verbose_name='Consent version')),
                ('updates_versions', models.BooleanField(default=False)),
                ('sid', models.CharField(blank=True, editable=False, help_text='Used for randomization against a prepared rando-list.', max_length=15, null=True, verbose_name='SID')),
                ('comment', django_crypto_fields.fields.encrypted_text_field.EncryptedTextField(blank=True, help_text=' (Encryption: AES local)', max_length=250, null=True, verbose_name='Comment')),
                ('dm_comment', models.CharField(editable=False, help_text='see also edc.data manager.', max_length=150, null=True, verbose_name='Data Management comment')),
                ('consent_identifier', models.UUIDField(default=uuid.uuid4, editable=False, help_text='A unique identifier for this consent instance')),
                ('report_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Report Date')),
                ('screening_identifier', models.CharField(blank=True, max_length=50, null=True, verbose_name='Screening identifier')),
                ('identity_type', models.CharField(choices=[('country_id', 'Country ID number'), ('passport', 'Passport'), ('birth_certificate', 'Birth Certificate'), ('OTHER', 'Other')], max_length=25, verbose_name='What type of identity number is this?')),
                ('language', models.CharField(blank=True, choices=[('af', 'Afrikaans'), ('ar', 'Arabic'), ('ar-dz', 'Algerian Arabic'), ('ast', 'Asturian'), ('az', 'Azerbaijani'), ('bg', 'Bulgarian'), ('be', 'Belarusian'), ('bn', 'Bengali'), ('br', 'Breton'), ('bs', 'Bosnian'), ('ca', 'Catalan'), ('cs', 'Czech'), ('cy', 'Welsh'), ('da', 'Danish'), ('de', 'German'), ('dsb', 'Lower Sorbian'), ('el', 'Greek'), ('en', 'English'), ('en-au', 'Australian English'), ('en-gb', 'British English'), ('eo', 'Esperanto'), ('es', 'Spanish'), ('es-ar', 'Argentinian Spanish'), ('es-co', 'Colombian Spanish'), ('es-mx', 'Mexican Spanish'), ('es-ni', 'Nicaraguan Spanish'), ('es-ve', 'Venezuelan Spanish'), ('et', 'Estonian'), ('eu', 'Basque'), ('fa', 'Persian'), ('fi', 'Finnish'), ('fr', 'French'), ('fy', 'Frisian'), ('ga', 'Irish'), ('gd', 'Scottish Gaelic'), ('gl', 'Galician'), ('he', 'Hebrew'), ('hi', 'Hindi'), ('hr', 'Croatian'), ('hsb', 'Upper Sorbian'), ('hu', 'Hungarian'), ('hy', 'Armenian'), ('ia', 'Interlingua'), ('id', 'Indonesian'), ('ig', 'Igbo'), ('io', 'Ido'), ('is', 'Icelandic'), ('it', 'Italian'), ('ja', 'Japanese'), ('ka', 'Georgian'), ('kab', 'Kabyle'), ('kk', 'Kazakh'), ('km', 'Khmer'), ('kn', 'Kannada'), ('ko', 'Korean'), ('ky', 'Kyrgyz'), ('lb', 'Luxembourgish'), ('lt', 'Lithuanian'), ('lv', 'Latvian'), ('mk', 'Macedonian'), ('ml', 'Malayalam'), ('mn', 'Mongolian'), ('mr', 'Marathi'), ('my', 'Burmese'), ('nb', 'Norwegian Bokmål'), ('ne', 'Nepali'), ('nl', 'Dutch'), ('nn', 'Norwegian Nynorsk'), ('os', 'Ossetic'), ('pa', 'Punjabi'), ('pl', 'Polish'), ('pt', 'Portuguese'), ('pt-br', 'Brazilian Portuguese'), ('ro', 'Romanian'), ('ru', 'Russian'), ('sk', 'Slovak'), ('sl', 'Slovenian'), ('sq', 'Albanian'), ('sr', 'Serbian'), ('sr-latn', 'Serbian Latin'), ('sv', 'Swedish'), ('sw', 'Swahili'), ('ta', 'Tamil'), ('te', 'Telugu'), ('tg', 'Tajik'), ('th', 'Thai'), ('tk', 'Turkmen'), ('tr', 'Turkish'), ('tt', 'Tatar'), ('udm', 'Udmurt'), ('uk', 'Ukrainian'), ('ur', 'Urdu'), ('uz', 'Uzbek'), ('vi', 'Vietnamese'), ('zh-hans', 'Simplified Chinese'), ('zh-hant', 'Traditional Chinese')], help_text='The language used for the consent process will also be used during data collection.', max_length=50, null=True, verbose_name='Language of consent')),
                ('consent_reviewed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have reviewed the consent with the participant')),
                ('study_questions', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have answered all questions the participant had about the study')),
                ('assessment_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If no, participant is not eligible.', max_length=3, null=True, validators=[edc_consent.validators.eligible_if_yes], verbose_name='I have asked the participant questions about this study and the participant has demonstrated understanding')),
                ('verbal_script', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], help_text='If no, participant is not eligible.', max_length=15, null=True, verbose_name="I have documented participant's details on the verbal script, and signed electronically")),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'verbose_name': 'Subject Consent',
                'ordering': ('-created',),
                'get_latest_by': 'consent_datetime',
                'abstract': False,
                'unique_together': {('first_name', 'dob', 'initials', 'version'), ('subject_identifier', 'version')},
            },
            bases=(edc_sms.models.subject_recipent_model_mixin.SubjectRecipientModelMixin, models.Model),
            managers=[
                ('consent', django.db.models.manager.Manager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='OnSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('consent_model', models.CharField(editable=False, max_length=50, null=True)),
                ('consent_version', models.CharField(editable=False, max_length=10, null=True)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('onschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future])),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'schedule_name')},
            },
            managers=[
                ('onsite', edc_base.sites.managers.CurrentSiteManager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='OffSchedule',
            fields=[
                ('created', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('modified', models.DateTimeField(blank=True, default=edc_base.utils.get_utcnow)),
                ('user_created', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model_fields.userfield.UserField(blank=True, help_text='Updated by admin.save_model', max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(blank=True, default=_socket.gethostname, help_text='System field. (modified on create only)', max_length=60)),
                ('hostname_modified', edc_base.model_fields.hostname_modification_field.HostnameModificationField(blank=True, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('device_created', models.CharField(blank=True, max_length=10)),
                ('device_modified', models.CharField(blank=True, max_length=10)),
                ('id', edc_base.model_fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('report_datetime', models.DateTimeField(editable=False)),
                ('offschedule_datetime', models.DateTimeField(default=edc_base.utils.get_utcnow, validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model_validators.date.datetime_not_future], verbose_name='Date and time subject taken off schedule')),
                ('subject_identifier', models.CharField(max_length=50, verbose_name='Subject Identifier')),
                ('schedule_name', models.CharField(blank=True, max_length=25, null=True)),
                ('community_arm', models.CharField(blank=True, max_length=25, null=True)),
                ('site', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='sites.site')),
            ],
            options={
                'unique_together': {('subject_identifier', 'schedule_name')},
            },
            managers=[
                ('onsite', edc_base.sites.managers.CurrentSiteManager()),
                ('on_site', edc_base.sites.managers.CurrentSiteManager()),
            ],
        ),
    ]
